import datetime
import os
import threading
import nse_security_wise_archive as nseSecurityWiseArchive;
import logging
from nse_utils import getStockListAndFileName
from utils import getAutoGeneratedFileName, getAutoGeneratedLogFileName
from constants import *
import nse_read_user_inputs as nseReadUserInputs
import time;
import nse_large_deals
import nse_large_deals_custom;


def logConfig(logFileName):
    datefolder = datetime.datetime.now().strftime('%d%m%Y');
    folderPath = 'logs//'+datefolder;
    if os.path.exists(folderPath):
        print("folder already exits");
    else:
        path = os.path.join("logs", datefolder);
        os.makedirs(path)
    
    # NORMAL MODE
    logging.basicConfig(
        # filename= os.path.join(folderPath, logFileName),
        format='%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',
        level=logging.INFO
    )

    # DEBUG MODE
    logging.basicConfig(
        # filename= os.path.join(folderPath, logFileName),
        format='%(asctime)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s',
        level=logging.DEBUG
    )

def synchronized(wrapped):
    lock = threading.Lock()

    def _wrap(*args, **kwargs):
        with lock:
            return wrapped(*args, **kwargs)

    return _wrap

# @synchronized
def main():
    start_time = time.time()
    fileName = '';
    input = nseReadUserInputs.getInputs();
    noOfDaysFromPresent = input['noOfDaysFromPresent'];
    # print(input);
    reportsDir = input['reportsDir'];
    selectedType:str = input['selectedNseDataType'];
    if selectedType == INPUT_TYPE_INDICES:
        selectedNseDataTypeList  = input['selectedNseDataTypeList'];
        strTotal = selectedType+"_"+ "Selected_Indices_In_Input";
        logFileName = getAutoGeneratedLogFileName(strTotal);
        logConfig(logFileName);
        logging.info(f"Started process time start_time = {start_time}");
        logging.info(f"Selected Nse DataType List (Selected Indices) {selectedNseDataTypeList}");
        logging.info(f"Log file has created and file name is {logFileName}")
        logging.info(f"Selected Input Type :: {selectedType}")
        for indice in selectedNseDataTypeList:
            dict  = getStockListAndFileName(indice,fileName,reportsDir);
            nseSecurityWiseArchive.nseGenerateSecurityWiseArchiveReport(dict["fileName"],dict["stockList"],indice,noOfDaysFromPresent,input);
        
        end_time = time.time();
        logging.info(f"Ended process time end_time = {end_time}");
        elapsed_time = end_time - start_time;
        elapsed_minutes = elapsed_time / 60
        logging.info(f"Elapsed time: {elapsed_minutes:.2f} minutes")
    
    elif selectedType == INPUT_TYPE_STOCKS:
        selectedStocksList = input['selectedStocksList'];
        strTotal = selectedType+"_Selected_Stocks_In_Input";
        logFileName = getAutoGeneratedLogFileName(strTotal);
        logConfig(logFileName);
        logging.info(f"Started process time start_time = {start_time}");
        logging.info(f"Selected Nse DataType List (Selected Indices) {selectedStocksList}");
        logging.info(f"Log file has created and file name is {logFileName}")
        logging.info(f"Selected Input Type :: {selectedType}")
        fileName = getAutoGeneratedFileName(strTotal,reportsDir);
        nseSecurityWiseArchive.nseGenerateSecurityWiseArchiveReport(fileName,selectedStocksList,strTotal,noOfDaysFromPresent,input);
        end_time = time.time();
        logging.info(f"Ended process time end_time = {end_time}");
        elapsed_time = end_time - start_time;
        elapsed_minutes = elapsed_time / 60
        logging.info(f"Elapsed time: {elapsed_minutes:.2f} minutes")
    
    elif selectedType == INPUT_TYPE_ALL:
        nseDataTypes = input['nseDataTypes'];
        strTotal = selectedType+"_INDICES_IN_INPUT";
        logFileName = getAutoGeneratedLogFileName(strTotal);
        logConfig(logFileName);
        logging.info(f"Started process time start_time = {start_time}");
        logging.info(f"Selected Nse ALL Indices {nseDataTypes}");
        logging.info(f"Log file has created and file name is {logFileName}")
        logging.info(f"Selected Input Type :: {selectedType}")
        fileName = getAutoGeneratedFileName(strTotal,reportsDir);
        for indice in nseDataTypes:
            dict  = getStockListAndFileName(indice,fileName);
            nseSecurityWiseArchive.nseGenerateSecurityWiseArchiveReport(dict["fileName"],dict["stockList"],indice,noOfDaysFromPresent,input);

        end_time = time.time();
        logging.info(f"Ended process time end_time = {end_time}");
        elapsed_time = end_time - start_time;
        elapsed_minutes = elapsed_time / 60
        logging.info(f"Elapsed time: {elapsed_minutes:.2f} minutes");
    elif selectedType == INPUT_TYPE_LARGE_DEALS:
        strTotal = selectedType;
        selectedDeals=input["selectedDeals"];
        logFileName = getAutoGeneratedLogFileName(strTotal);
        logConfig(logFileName);
        logging.info(f"Started process time start_time = {start_time}");
        logging.info(f"Log file has created and file name is {logFileName}")
        logging.info(f"Selected Input Type :: {selectedType}")
        fileName = getAutoGeneratedFileName(strTotal,reportsDir);
        logging.info("Started fetching large deals Data....");
        nse_large_deals.nse_largedeals(selectedDeals, fileName);
        logging.info("Completed fetching large deals Data....");
        end_time = time.time();
        logging.info(f"Ended process time end_time = {end_time}");
        elapsed_time = end_time - start_time;
        elapsed_minutes = elapsed_time / 60
        logging.info(f"Elapsed time: {elapsed_minutes:.2f} minutes");
    elif selectedType == INPUT_TYPE_LARGE_DEALS_CUSTOMIZATION:
        strTotal = selectedType;
        selectedDeals=input["selectedDealsCustomization"];
        logFileName = getAutoGeneratedLogFileName(strTotal) ;
        logConfig(logFileName);
        logging.info(f"Started process time start_time = {start_time}");
        logging.info(f"Log file has created and file name is {logFileName}")
        logging.info(f"Selected Input Type :: {selectedType}")
        fileName = getAutoGeneratedFileName(strTotal,reportsDir);
        logging.info("Started fetching large deals Data....");
        nse_large_deals_custom.nse_largedeals(selectedDeals, fileName,noOfDaysFromPresent);
        logging.info("Completed fetching large deals Data....");
        end_time = time.time();
        logging.info(f"Ended process time end_time = {end_time}");
        elapsed_time = end_time - start_time;
        elapsed_minutes = elapsed_time / 60
        logging.info(f"Elapsed time: {elapsed_minutes:.2f} minutes");
    # pass

    # nse_largedeals(["bulk-deals","block-deals","short-selling"],"deals","07-07-2024","14-07-2024")

main();